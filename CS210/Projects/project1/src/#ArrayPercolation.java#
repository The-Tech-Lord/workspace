import stdlib.In;
import stdlib.StdOut;

// An implementation of the Percolation API using a 2D array.
public class ArrayPercolation implements Percolation {
	private int percolation_system_size;
	private boolean[][] percolation_system;
	private int openSites;

    // Constructs an n x n percolation system, with all sites blocked.
    public ArrayPercolation(int size) {
		// Size check
		if (size <= 0) {
			throw new IllegalArgumentException("Illegal n");
		}

		percolation_system_size = size;
		percolation_system = new boolean[size][size];
		openSites = 0;
    }

    // Opens site (i, j) if it is not already open.
    public void open(int i, int j) {
		// Out of Bounds checking
        if (i < 0 || i > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		} else if (j < 0 || j > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		}

		// Boolean check
		if (percolation_system[i][j] == false) {
			percolation_system[i][j] = true;
			this.openSites++;
		}
    }

    // Returns true if site (i, j) is open, and false otherwise.
    public boolean isOpen(int i, int j) {
		// Out of Bounds checking
        if (i < 0 || i > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		} else if (j < 0 || j > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		}

		// Boolean check
		if (percolation_system[i][j] == true) {
			return true;
		}
		return false;
    }

    // Returns true if site (i, j) is full, and false otherwise.
    public boolean isFull(int i, int j) {
		// Out of Bounds checking
        if (i < 0 || i > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		} else if (j < 0 || j > percolation_system.length - 1) {
			throw new IndexOutOfBoundsException("Illegal i or j");
		}

		// Creates another array to test the percolation system
		boolean[][] full = new boolean[percolation_system_size][percolation_system_size];
		for (int jj = 0; jj < percolation_system[0].length; j++) {

			floodFill(full, 0, jj);
		}

		return full[i][j];
    }

    // Returns the number of open sites.
    public int numberOfOpenSites() {
    	return this.openSites;
	}

	// Returns true if this system percolates, and false otherwise.
	public boolean percolates() {
		/* Since I am unable to use the isFull() method directly unless I create another
		 * object and unable to input the required indexes, I decided to copy and paste
		 * the main code of isFull() and adapt it to the percolates() method. This way,
		 * I am now able to access the contents of the full[][] array and check whether
		 * there is a full site or not on the last row.
		 */
		boolean[][] full = new boolean[percolation_system_size][percolation_system_size];
		for (int j = 0; j < this.percolation_system[0].length; j++) {
			floodFill(full, 0, j);
		}

		for (int j = 0; j < full[0].length; j++) {
			if (full[full.length - 1][j]) {
				return true;
			}
		}

		return false;
	}

	// Recursively flood fills full[][] using depth-first exploration, starting at (i, j).
	private void floodFill(boolean[][] full, int i, int j) {
		// Bounds checking
		if (i > full.length - 1 || j > full[0].length - 1) {
			return;
		} else if (i < 0 || j < 0) {
			return;
		}
		// Checks for blocked site
		if (this.percolation_system[i][j] == false) {
			return;
		}
		// Checks for full site
		if (full[i][j] == true) {
			return;
		}

		// Fill site
		full[i][j] = true;

		// Check adjacent sites
		floodFill(full, i - 1, j); // North
		floodFill(full, i + 1, j); // South
		floodFill(full, i, j + 1); // East
		floodFill(full, i, j - 1); // West
    }

    // Unit tests the data type. [DO NOT EDIT]
    public static void main(String[] args) {
        String filename = args[0];
        In in = new In(filename);
        int n = in.readInt();
        ArrayPercolation perc = new ArrayPercolation(n);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            perc.open(i, j);
        }
        StdOut.printf("%d x %d system:\n", n, n);
        StdOut.printf("  Open sites = %d\n", perc.numberOfOpenSites());
        StdOut.printf("  Percolates = %b\n", perc.percolates());
        if (args.length == 3) {
            int i = Integer.parseInt(args[1]);
            int j = Integer.parseInt(args[2]);
            StdOut.printf("  isFull(%d, %d) = %b\n", i, j, perc.isFull(i, j));
        }
    }
}
